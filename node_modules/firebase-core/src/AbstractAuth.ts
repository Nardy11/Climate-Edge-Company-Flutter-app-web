import { 
    Auth,
    createUserWithEmailAndPassword,
    signInWithEmailAndPassword,
    signOut as signOutAuth,
    UserCredential,
    signInWithPopup,
    GoogleAuthProvider,
    GithubAuthProvider,
} from 'firebase/auth';

import FirebaseService, { FirebaseConfig } from './FirebaseService';


export default abstract class AbstractAuth {
    private auth: Auth;

    constructor(config: FirebaseConfig) {
        this.auth = FirebaseService.getInstance(config).getFirebase().auth;
    }

    /**
     * 
     * @param email - User email
     * @param password - User password
     * @returns - Promise that resolves with the UserCredential
     */
    protected async signUpWithEmail(
        email: string, 
        password: string
    ): Promise<UserCredential> {
        return await createUserWithEmailAndPassword(this.auth, email, password);
    }
 
    /**
     * Sign in existing users with email and password
     * @param email - User email
     * @param password - User password
     * @returns - Promise that resolves with the UserCredential
     */
    protected async signInWithEmail(
        email: string, 
        password: string
    ): Promise<UserCredential> {
        return await signInWithEmailAndPassword(this.auth, email, password);
    }

    /**
     * Sign in with Google
     * @returns - Promise that resolves with the UserCredential
     */
    protected async signInWithGoogle(): Promise<UserCredential> {
        const provider = new GoogleAuthProvider();
        return await signInWithPopup(this.auth, provider);
    }

    /**
     * Sign out the current user
     * @returns - Promise that resolves once the user has been signed out
     */
    protected async signOut(): Promise<void> {
        return await signOutAuth(this.auth);
    }

    /**
     * Get the Auth object
     * @returns - Returns the Auth object
     */
    protected getAuth(): Auth {
        return this.auth;
    }

    /**
     * Get the current user
     * @returns - Returns the current authenticated user
     */
    protected getCurrentUser() {
        return this.auth.currentUser;
    }

    /**
     * Gets the current user's id token
     * @returns - Returns the current user's id token
     * @throws - Throws an error if the user is not found
     */
    protected async getIdToken(
        currentUser: UserCredential
    ): Promise<string> {
        if (currentUser.user) {
            return await currentUser.user.getIdToken();
        } else {
            throw new Error('User not found');
        }
    }

    /**
     * Sign in with Github
     * @returns - Promise that resolves with the UserCredential
     */
    protected async signInWithGithub(): Promise<UserCredential> {
        const provider = new GithubAuthProvider();
        return await signInWithPopup(this.auth, provider);
    }

    abstract onAuthStateChanged(): Promise<void>;
}