import { addDoc, collection, CollectionReference, doc, DocumentData, DocumentReference, DocumentSnapshot, Firestore, setDoc } from "firebase/firestore";
import FirebaseService, { FirebaseConfig } from "./FirebaseService";

/**
 * @abstract
 * @class AbstractFirestore
 * @description Abstract class for Firestore operations
 * 
 * @property {Firestore} firestore - Firestore instance
 * @property {Map<string, CollectionReference<DocumentData>>} collections - Firestore collection
 * references mapped by collection name
 * 
 * @method addDocument - Adds a document to the Firestore collection
 * @method setDocument - Sets a document in the Firestore collection
 * @method createCollection - Creates a Firestore collection
 * @method getCollections - Returns all Firestore collections
 * @method getCollection - Returns a Firestore collection by name
 */
export default abstract class AbstractFirestore {

    protected firestore: Firestore;

    constructor(config: FirebaseConfig) {
        this.firestore = FirebaseService.getInstance(config).getFirebase().firestore;

    }


    /**
     * Adds a document to the Firestore collection
     * @param data - Document data to add
     * @param collection - Firestore collection reference to add the document to
     * @returns document reference of the added document
     */
    protected async addDocument(
        data: DocumentData, 
        collection: CollectionReference<DocumentData>
    ): Promise<DocumentReference<DocumentData>> {
        return await addDoc(collection, data);
    }

    /**
     * Sets a document in the Firestore collection
     * @param id - id of the document to set
     * @param data - Document data to set
     * @param collection - Firestore collection reference to set the document in
     * @returns	- Promise that resolves once the data has been successfully written to the backend
     */
    protected async setDocument(
        id: string, 
        data: DocumentData,
        collection: CollectionReference<DocumentData>
    ): Promise<void> {
        const document = doc(collection, id);
        await setDoc(document, data);
    }

    protected abstract addCollection(collectionName: string): Promise<void>;

    /**
     * 
     * @returns - Returns all Firestore collections
     */
    protected abstract getCollections(): Promise<Map<string, CollectionReference<DocumentData>>>;

    abstract getDocument(id: string, collectionName: string): Promise<DocumentSnapshot<DocumentData>>;
    abstract getDocuments(collectionName: string): Promise<DocumentData[]>;
    abstract deleteDocument(id: string, collectionName: string): Promise<void>;
    abstract updateDocument(id: string, data: DocumentData, collectionName: string): Promise<void>;

    
}